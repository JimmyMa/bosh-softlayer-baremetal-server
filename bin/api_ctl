#!/usr/bin/env ruby

ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)

require 'rubygems'
require 'bundler/setup'
require 'yaml'
require 'optparse'
require 'thin'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'bluemix'
require 'bluemix/app'
require 'bluemix/api/api'

DESCRIPTION = "
This tool reads service definition from default configuration
file ../config/default.yml or uses the path indicated by -c

Ctrl-C to cleanly terminate

"

# default configuration file
config_file = File.join(File.dirname(__FILE__), '..', 'config', 'default.yml')

OptionParser.new do |options|
  options.banner = 'Usage: api_ctl [options]'

  options.on('-c', '--config CONFIG', 'Configuration file') do |option|
    config_file = option
  end

  options.on('-h', '--help', 'Help') do
    puts DESCRIPTION
    puts options
    exit
  end
end.parse!

begin
  @config = YAML.load_file(config_file)
  @config["root_dir"] = File.join(File.dirname(__FILE__), '..')
  @config["blobstore_dir"] = "#{@config["store_dir"]}/stemcells/"
rescue => exception
  puts "Can't load config file: #{ exception }"
  exit 1
end

Bluemix::BM::App.new(@config)

thin_server = Thin::Server.new('0.0.0.0', @config['port'], signals: false) do
  use Rack::CommonLogger
  map '/' do
    run Bluemix::BM::Api::Controller.new
  end
end

%w(TERM INT QUIT).each do |signal|
  trap(signal) do
#    Bosh::Director::Config.logger.info('Shutting down Director')
    thin_server.stop!
  end
end

#Bosh::Director::Config.logger.info("Listening on port #{config.hash['port']}")
thin_server.start!
