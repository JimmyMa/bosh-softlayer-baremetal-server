package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
)

/*Packages packages

swagger:model Packages
*/
type Packages struct {

	/* data
	 */
	Data *PackagesData `json:"data,omitempty"`

	/* status
	 */
	Status *int32 `json:"status,omitempty"`
}

// Validate validates this packages
func (m *Packages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Packages) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {

		if err := m.Data.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

/*PackagesData packages data

swagger:model PackagesData
*/
type PackagesData struct {

	/* packages
	 */
	Packages []*Package `json:"packages,omitempty"`
}

// Validate validates this packages data
func (m *PackagesData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackagesData) validatePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages); i++ {

		if m.Packages[i] != nil {

			if err := m.Packages[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
